QUESTION...


Essential List (Practical) 
1 Write a PL/SQL block to increase the salary by 10 %( Rs. 6000) of the Employee whose 
Job=’Accounting’ and display the count total number of employees whose job=’Accounting.  
Raise and exception for Job title


ANSWER...


    DECLARE
  2      no_employees_found EXCEPTION;
  3      v_count NUMBER;
  4
  5  BEGIN
  6      SELECT COUNT(*)
  7      INTO v_count
  8      FROM Employee
  9      WHERE JOB = 'ACCOUNTING';
 10
 11      IF v_count = 0 THEN
 12          RAISE no_employees_found;
 13      END IF;
 14
 15      UPDATE Employee
 16      SET SAL = SAL + GREATEST(0.10 * SAL, 6000)
 17      WHERE JOB = 'ACCOUNTING';
 18
 19      DBMS_OUTPUT.PUT_LINE(v_count || ' employee(s) found in Accounting. Salary updated.');
 20
 21  EXCEPTION
 22      WHEN no_employees_found THEN
 23          DBMS_OUTPUT.PUT_LINE('No employees found with the job title Accounting.');
 24  END;
 25  /
2 employee(s) found in Accounting. Salary updated.

PL/SQL procedure successfully completed.
  


QUESTION...


Desirable List (Practical) 
1 Write a user defined exception for program where if student’s marks are less than 0 then 
appropriate error message must be shown as exception.  
Write a PLSQL block to find the largest of three numbers 


ANSWER...



SQL> DECLARE
  2      invalid_marks EXCEPTION;
  3      v_marks1 NUMBER;
  4      v_marks2 NUMBER;
  5      v_marks3 NUMBER;
  6      v_largest NUMBER;
  7
  8  BEGIN
  9      SELECT Marks INTO v_marks1 FROM student1 WHERE StudentID = 1; -- Replace with actual ID for the first student
 10      SELECT Marks INTO v_marks2 FROM student1 WHERE StudentID = 2; -- Replace with actual ID for the second student
 11      SELECT Marks INTO v_marks3 FROM student1 WHERE StudentID = 3; -- Replace with actual ID for the third student
 12
 13      IF v_marks1 < 0 THEN
 14          RAISE invalid_marks;
 15      END IF;
 16
 17      IF v_marks2 < 0 THEN
 18          RAISE invalid_marks;
 19      END IF;
 20
 21      IF v_marks3 < 0 THEN
 22          RAISE invalid_marks;
 23      END IF;
 24
 25      v_largest := GREATEST(v_marks1, v_marks2, v_marks3);
 26
 27      DBMS_OUTPUT.PUT_LINE('The largest mark is: ' || v_largest);
 28
 29  EXCEPTION
 30      WHEN invalid_marks THEN
 31          DBMS_OUTPUT.PUT_LINE('Error: Marks cannot be less than 0.');
 32  END;
 33  /
The largest mark is: 89

PL/SQL procedure successfully completed.
