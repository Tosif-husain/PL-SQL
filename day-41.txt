QUESTION...


Essential List (Practical/Theory) 
1 Create a package which stores the above functions and procedures. 
 
2 Use following tables and do as directed:  
Movie (movie_id, movie name, date_of_release) 
 Screen (screen_id, location, max_capacity)  
Current (movie_id,screen_id, date_of_arrival, date_of_closure) 
. Write a function that will return max_capacity of a screen by providing Screen_Id as a 
parameter


ANSWER...


SQL> CREATE OR REPLACE PACKAGE movie_screen_pkg AS
  2      FUNCTION get_max_capacity(p_screen_id IN NUMBER) RETURN NUMBER;
  3  END movie_screen_pkg;
  4  /

Package created.

SQL> CREATE OR REPLACE PACKAGE BODY movie_screen_pkg AS
  2      FUNCTION get_max_capacity(p_screen_id IN NUMBER) RETURN NUMBER IS
  3          v_max_capacity NUMBER;
  4      BEGIN
  5          SELECT max_capacity INTO v_max_capacity
  6          FROM Screen
  7          WHERE screen_id = p_screen_id;
  8
  9          RETURN v_max_capacity;
 10      EXCEPTION
 11          WHEN NO_DATA_FOUND THEN
 12              RETURN NULL;  -- or raise an error if preferred
 13      END get_max_capacity;
 14  END movie_screen_pkg;
 15  /

Package body created.

SQL> DECLARE
  2      v_capacity NUMBER;
  3  BEGIN
  4      v_capacity := movie_screen_pkg.get_max_capacity(1);  -- Replace 1 with the desired screen_id
  5      DBMS_OUTPUT.PUT_LINE('Max Capacity: ' || v_capacity);
  6  END;
  7  /
Max Capacity: 200

PL/SQL procedure successfully completed.


QUESTION...


Desirable List (Practical) 
1 Use following tables and do as directed: 
 Movie (movie_id, movie_name, date_of_release)  
Create a trigger on the movie table where trigger should be fired when the new movie is 
added.. 


ANSWER...

SQL> SHOW ERRORS TRIGGER trg_after_insert_movie;
Errors for TRIGGER TRG_AFTER_INSERT_MOVIE:

LINE/COL ERROR
-------- -----------------------------------------------------------------
3/5      PL/SQL: SQL Statement ignored
3/17     PL/SQL: ORA-00942: table or view does not exist
SQL> CREATE TABLE Movie_Log (
  2      log_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  3      movie_id NUMBER,
  4      movie_name VARCHAR2(100),
  5      date_of_release DATE,
  6      action_date DATE
  7  );

Table created.

SQL> CREATE OR REPLACE TRIGGER trg_after_insert_movie
  2  AFTER INSERT ON Movie
  3  FOR EACH ROW
  4  BEGIN
  5      INSERT INTO Movie_Log (movie_id, movie_name, date_of_release, action_date)
  6      VALUES (:NEW.movie_id, :NEW.movie_name, :NEW.date_of_release, SYSDATE);
  7  END trg_after_insert_movie;
  8  /

Trigger created.
